<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Musica on Bruna Wundervald</title>
    <link>https://brunaw.github.io/tags/musica/</link>
    <description>Recent content in Musica on Bruna Wundervald</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Bruna Wundervald</copyright>
    <lastBuildDate>Wed, 25 Apr 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/musica/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>chorrrds: Analisando acordes de músicas brasileiras</title>
      <link>https://brunaw.github.io/post/2018-04-25-chorrrds/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://brunaw.github.io/post/2018-04-25-chorrrds/</guid>
      <description>&lt;p&gt;Olá! Tudo bem? Eu sou a &lt;a href=&#34;https://github.com/brunaw&#34;&gt;Bruna&lt;/a&gt;, e talvez você já me conheça de algum grupo de R no Telegram ou Facebook, ou mesmo pelo meu outro pacote, o&lt;br /&gt;
&lt;a href=&#34;https://cran.r-project.org/web/packages/vagalumeR/index.html&#34;&gt;vagalumeR&lt;/a&gt;. Eu estou prestes a me formar em Estatística na UFPR, e esse post vai ter muito a ver com o tema do meu trabalho de conclusão de curso, que está sendo feito sob orientação do Professor &lt;a href=&#34;https://github.com/walmes&#34;&gt;Walmes Zeviani&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recentemente, eu fiz a primeira versão do pacote do meu TCC, o &lt;code&gt;chorrrds&lt;/code&gt;. Ainda tem muito a ser feito nele, mas os primeiros resultados já são bem legais. O pacote &lt;code&gt;chorrrds&lt;/code&gt; pode ser utilizado para a obtenção acordes de músicas, através da raspagem do site &lt;a href=&#34;https://www.cifraclub.com.br/&#34;&gt;CifraClub&lt;/a&gt;. Junto com o pacote já vêm diversos bancos de dados relativos à música brasileira. Ele já está disponível no CRAN, mas as próximas atualizações devem sair em primeira mão nesse repositório: &lt;a href=&#34;https://github.com/brunaw/chorrrds&#34; class=&#34;uri&#34;&gt;https://github.com/brunaw/chorrrds&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Instalação
devtools::install_github(&amp;quot;brunaw/chorrrds&amp;quot;)
# ou
install.packages(&amp;quot;chorrrds&amp;quot;) # do CRAN
data(package = &amp;quot;chorrrds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A base de dados chamada &lt;code&gt;all&lt;/code&gt;, presente no pacote, contém dados referentes a 106 artistas nacionais, dos genêros: “rock”, “pop”, “sertanejo”, “MPB”, “bossa nova”, “forró”, “reggae” e “samba”. Ela já contém, além das variáveis extraídas com o pacote, as datas de lançamento e a popularidade das músicas, obtidas através da API do &lt;a href=&#34;https://github.com/tiagomendesdantas/Rspotify&#34;&gt;Spotify&lt;/a&gt;. Os detalhes sobre a seleção dos artistas e combinação dos dados com os do Spotify serão omitidos por enquanto, mas quem quiser falar sobre isso comigo, pode ficar a vontade :)&lt;/p&gt;
&lt;p&gt;Então vamos lá. Eu vou começar acertando alguns pontos sobre os dados, já que eles não estão perfeitos, como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deixar apenas os anos de lançamento das músicas, e não a data completa;&lt;/li&gt;
&lt;li&gt;Encontrar as formas mais simples dos acordes (sem acidentes ou extensões);&lt;/li&gt;
&lt;li&gt;Conectar a base original com a dos genêros dos artistas;&lt;/li&gt;
&lt;li&gt;Consertar enarmonias, ou seja, transformar as diferentes versões de um acorde com as mesmas notas em uma coisa só (por exemplo, Gb passa a ser F#, já que na prática eles são iguais).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)

# Base de gêneros
genre &amp;lt;- chorrrds::genre

da &amp;lt;- chorrrds::all %&amp;gt;% 
  dplyr::mutate(date = stringr::str_extract(date, 
                                            pattern = &amp;quot;[0-9]{4,}&amp;quot;)) %&amp;gt;%
  # Extrai apenas os anos
  dplyr::mutate(date = as.numeric(date), # Deixa as datas como valores numéricos
                acorde = stringr::str_extract(chord, # Extrai as partes fundamentais dos
                                              pattern = &amp;quot;^([A-G]#?b?)&amp;quot;)) %&amp;gt;%  # acordes
  dplyr::filter(date &amp;gt; 1900) %&amp;gt;% # Mantém apenas os anos que fazem sentido
  dplyr::left_join(genre, by = &amp;quot;artist&amp;quot;) %&amp;gt;%  # Traz os gêneros dos artistas
  dplyr::mutate(acorde = case_when( # Contribuição do Julio 
    acorde == &amp;quot;Gb&amp;quot; ~ &amp;quot;F#&amp;quot;,
    acorde == &amp;quot;C#&amp;quot; ~ &amp;quot;Db&amp;quot;,          
    acorde == &amp;quot;G#&amp;quot; ~ &amp;quot;Ab&amp;quot;,
    acorde == &amp;quot;A#&amp;quot; ~ &amp;quot;Bb&amp;quot;,
    acorde == &amp;quot;D#&amp;quot; ~ &amp;quot;Eb&amp;quot;,
    acorde == &amp;quot;E#&amp;quot; ~ &amp;quot;F&amp;quot;,
    acorde == &amp;quot;B#&amp;quot; ~ &amp;quot;C&amp;quot;,
    TRUE ~ acorde)) # Conversão de enarmonias

head(da)&lt;/code&gt;&lt;/pre&gt;
&lt;table style=&#34;width:100%;&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;5%&#34; /&gt;
&lt;col width=&#34;39%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;col width=&#34;4%&#34; /&gt;
&lt;col width=&#34;20%&#34; /&gt;
&lt;col width=&#34;7%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;right&#34;&gt;date&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;music&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;popul&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;chord&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;key&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;artist&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;acorde&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;genre&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1992&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto a fabrica do poema&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cm&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;D#&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MPB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1992&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto a fabrica do poema&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;D#&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Ab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MPB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1992&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto a fabrica do poema&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Db7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;D#&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Db&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MPB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1992&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto a fabrica do poema&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Db7/9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;D#&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Db&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MPB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1992&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto a fabrica do poema&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Cm&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;D#&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MPB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;right&#34;&gt;1992&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto a fabrica do poema&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;51&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Fm&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;D#&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;adriana calcanhotto&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;MPB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A base está no formato longo, ou seja, temos uma linha para cada acorde da música, mantendo a sequência na qual eles aparecem no site.&lt;/p&gt;
&lt;p&gt;Muito se fala sobre o quanto as músicas no Brasil andam ficando mais “simples”, ou que alguns genêros musicais são mais ricos que outros. Com os dados que temos, será que é possível concluir algo sobre isso olhando simplesmente para a quantidade média de acordes por música ao longo dos anos? Vejamos o gráfico a seguir.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;da_g &amp;lt;- da %&amp;gt;% 
  # 2018 ainda não é um ano completo
  dplyr::mutate(date &amp;lt; 2018) %&amp;gt;%  
  # Agrupamento por data + acorde + musica
  dplyr::group_by(date, genre, music, chord) %&amp;gt;% 
  # Mantém os acordes distintos/ano
  dplyr::summarise(distintos = n_distinct(chord)) %&amp;gt;% 
  dplyr::summarise(cont = n()) %&amp;gt;% 
  # Média de acordes distintos nas músicas/ano
  dplyr::summarise(media = mean(cont), contagem = n()) 


# grafico
p &amp;lt;- da_g %&amp;gt;% 
  ggplot(aes(x = date, y = media)) +
  geom_point(colour = &amp;quot;skyblue3&amp;quot;) +
  facet_wrap(&amp;quot;genre&amp;quot;) +
  scale_fill_hue(c = 55, l = 75) +
  geom_smooth(aes(group = genre), span = 0.65, colour = &amp;quot;white&amp;quot;, 
              fill = &amp;quot;tan&amp;quot;, method = &amp;quot;loess&amp;quot;) +
  labs(x = &amp;quot;Anos&amp;quot;, y = &amp;quot;Média de acordes/música&amp;quot;)

# tema para deixar o gráfico bonitinho
tema &amp;lt;- theme(
  legend.position=&amp;#39;none&amp;#39;, 
  axis.line = element_line(size = 0.5, colour = &amp;quot;tan&amp;quot;),
  panel.grid.major = element_line(
    colour = &amp;quot;black&amp;quot;, size = 0.08, linetype = &amp;quot;dotted&amp;quot;),
  panel.border = element_blank(),
  panel.background = element_blank(),
  strip.background = element_rect(colour = &amp;quot;tan&amp;quot;, fill = &amp;quot;white&amp;quot;, size = 0.6), 
  strip.text = element_text(size = 14),
  axis.title = element_text(size = 14),
  axis.text = element_text(size = 12))
  
p + tema&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://brunaw.github.io/blog/2018-04-25-chorrrds/media-acordes-musicas.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Claramente, gêneros como o samba, MPB e bossa nova têm, em geral, uma quantidade média de acordes distintos por música muito maior do que os outros. E eles têm mais variação ao longo dos anos também, o que pode ser um reflexo da maior criatividade envolvida nestes genêros. Os menores valores, como é esperado, estão principalmente no sertanejo, que é um genêro conhecidamente mais uniforme na questão harmônica.&lt;/p&gt;
&lt;p&gt;Nós podemos avançar um pouco e olhar para os próprios artistas. Quem será que usa as maiores quantidades de acordes distintos em suas composições? Vamos ver o próximo gráfico, que mostra apenas os artistas com mediana maior do que 8 acordes diferentes por música.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;da_g &amp;lt;- da %&amp;gt;%   
  dplyr::mutate(artist = stringr::str_to_title(artist)) %&amp;gt;% 
  # Agrupamento por artista + música
  dplyr::group_by(artist, genre, music) %&amp;gt;% 
  # Mantém os acordes distintos
  dplyr::summarise(distintos = n_distinct(chord)) %&amp;gt;% 
  # Obtém a mediana e quantis de acordes distintos por música/artistas
  dplyr::summarise(med = median(distintos), 
                   contagem = n(),
                   inf = quantile(distintos)[2],
                   sup = quantile(distintos)[4])


# grafico
p &amp;lt;- da_g %&amp;gt;%
  dplyr::filter(med &amp;gt; 8) %&amp;gt;% 
  ggplot(aes(x = reorder(artist, med), y = med)) +
  geom_pointrange(aes(ymin = inf, ymax = sup, colour = genre), size = 0.7) + 
  scale_colour_hue(c = 55, l = 75) +
  coord_flip() +
  labs(colour = &amp;quot;Gênero&amp;quot;, 
       x = &amp;quot;Artistas&amp;quot;, 
       y = &amp;quot;Primeiro quartil, mediana e terceiro quartil&amp;quot;)

# tema
tema &amp;lt;- theme(
  axis.line = element_line(size = 0.5, 
                           colour = &amp;quot;tan&amp;quot;),
  panel.grid.major = element_line(colour = &amp;quot;black&amp;quot;, 
                                  size = 0.08, 
                                  linetype = &amp;quot;dotted&amp;quot;),
  panel.border = element_blank(),
  panel.background = element_blank(),
  axis.text = element_text(size = 12), 
  axis.title.x = element_text(size = 16),
  axis.title.y = element_text(size = 16))

p + tema&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://brunaw.github.io/blog/2018-04-25-chorrrds/stats-artistas.png&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;E &lt;em&gt;voilá&lt;/em&gt;. A primeira posição é ocupada por um dos maiores musicistas brasileiros, que é referência internacional em questões de harmonia: Chico Buarque. Logo em seguida, temos o Reinaldo, um dos maiores sambistas que o Brasil já conheceu, e o Pixinguinha, um gênio do choro. E assim a lista segue, com artistas principalmente da bossa nova, samba e MPB. Demora até que apareça o primeiro dos rockeiros nesta lista, que é a Rita Lee. Dos membros do sertanejo, nenhum chega a aparecer no gráfico, mostrando que a “variedade” harmônica deste gênero musical é mesmo bem baixa.&lt;/p&gt;
&lt;p&gt;Até agora está legal mas, com música, sempre pode ficar ainda mais. A ideia mais recente que o meu caro orientador &lt;a href=&#34;https://github.com/walmes&#34;&gt;Walmes Zeviani&lt;/a&gt; teve para o nosso trabalho é de encadear as transições entre os acordes em um diagrama de cordas. Vocês já ouviram falar desse diagrama? Eu mal o conheço e já considero pacas.&lt;/p&gt;
&lt;p&gt;O diagrama de cordas é um método gráfico (e lindo) de explicitar relações entre grupos ou indivíduos. Os grupos ficam arranjados de forma radial/circular, e as cordas que aparecem dentro do círculo demonstram as conexões entre eles e suas forças. Pra quem sabe um pouquinho sobre harmonia, vai ser sensacional ver o quanto isso faz sentido (mas também não vou entrar nesse mérito agora).&lt;/p&gt;
&lt;p&gt;O exemplo que eu vou mostrar aqui é extremamente simples. Antes eu separei, dos acordes “crus” retirados do CifraClub, apenas a parte fundamental deles. Isto é, desconsiderei se um acorde tem notas extras, acidentes e maior/menor. Ou seja, aqui nós só veremos acordes como C, D, B, A#, o miolo da coisa. Podemos perder informação fazendo isso? Sim, e bastante. Mas como eu disse, esse caso é pra ser bem simples mesmo.&lt;/p&gt;
&lt;p&gt;Enfim, vamos voltar ao exemplo. A seguir, eu considero como uma “transição” quando um acorde aparece em sequência do outro (exemplo de transição muito comum: dó-sol). O código abaixo constrói o diagrama de cordas através do pacote &lt;code&gt;chordiag&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;quot;mattflor/chorddiag&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Ordenando por círculo das quintas
ordem &amp;lt;- c(&amp;quot;G&amp;quot;, &amp;quot;D&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;E&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;F#&amp;quot;, 
           &amp;quot;Db&amp;quot;, &amp;quot;Ab&amp;quot;, &amp;quot;Eb&amp;quot;, &amp;quot;Bb&amp;quot;, &amp;quot;F&amp;quot;, &amp;quot;C&amp;quot;)

da$acorde &amp;lt;- factor(da$acorde, levels = ordem)

comp &amp;lt;- data.frame(
  acorde = da$acorde, 
  seq = dplyr::lead(da$acorde)) %&amp;gt;% # Pega o acorde &amp;quot;seguinte&amp;quot;
  dplyr::group_by(acorde, seq) %&amp;gt;%  # Agrupa por cada transição
  dplyr::summarise(contagem = n()) # Conta quantas são as transições

mat_comp &amp;lt;- reshape2::dcast(comp,   # Arranja em do tipo matriz quadrada
                            acorde ~ seq, value.var = &amp;quot;contagem&amp;quot;) 
mm &amp;lt;- as.matrix(mat_comp[ ,-1]) # Converte o df em matriz (exigência do pacote)
mm[is.na(mm)] &amp;lt;- 0 # Substitui na por 0 (exigência do pacote)
dimnames(mm) &amp;lt;- list(acorde = unique(mat_comp$acorde),
                     seq = unique(mat_comp$acorde))

# Constrói o diagrama interativo
chorddiag::chorddiag(mm, showTicks = FALSE,
                     palette = &amp;quot;Set2&amp;quot;, palette2 = &amp;quot;#Set3&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;center&gt;
&lt;iframe src=&#34;https://r-music.github.io/rday-2018/docs/chorrrds&#34; width=&#34;100%&#34; height=&#34;650&#34; frameborder=&#34;0&#34; scrolling=&#34;no&#34; marginheight=&#34;0&#34; marginwidth=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/center&gt;
&lt;p&gt;Vejam que interessante. Como eu disse antes, uma das relações mais fortes do diagrama é o C-G (ou dó-sol), que é justificada teoricamente, já que o G é a quinta do C. O mesmo acontece com D-A, A-E, F-C e assim por diante. Quem quiser saber mais sobre esse comportamento, pode dar uma olhada &lt;a href=&#34;https://ledgernote.com/columns/music-theory/circle-of-fifths-explained/&#34;&gt;aqui&lt;/a&gt;. Transições meio malucas, como B-Bb, também acontecem. “Maluca” porque um acorde bemol, indicado pelo “b”, é aquele cuja raíz esta meio tom abaixo do indicado pela letra anterior, que neste caso é o B (si), então esse acontecimento não faz muito sentido.&lt;/p&gt;
&lt;div id=&#34;consideracoes-finais&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Considerações Finais&lt;/h1&gt;
&lt;p&gt;O que vimos aqui é um pedaço da análise inicial do meu TCC, que ainda não está nem um pouco pronto. São exemplos simples das informações podemos extrair com o pacote &lt;code&gt;chorrrds&lt;/code&gt;, e o universo de possibilidades é infinito. Isso que nós nem começamos a falar sobre as conexões que podem ser feitas com a API do Spotify, o pacote &lt;code&gt;music21&lt;/code&gt;, que é do próprio Julio Trecenti, com as letras das músicas,…&lt;/p&gt;
&lt;p&gt;Além disso, om certeza, meu objetivo com os gráficos apresentados não é fazer nenhum tipo de juízo de valor sobre os genêros por conta de “complexidade harmônica”. Diga-se de passagem, eu mesma sou bem fã de todos esses genêros, desde a MPB até o sertanejo :D&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;agradecimentos&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Agradecimentos&lt;/h1&gt;
&lt;p&gt;Ao meu orientador, &lt;a href=&#34;https://github.com/walmes&#34;&gt;Walmes Zeviani&lt;/a&gt;, que fez eu me apaixonar pelo R, e ao &lt;a href=&#34;http://curso-r.com/author/julio/&#34;&gt;Julio Trecenti&lt;/a&gt;, que é tão entusiasta do meu TCC quanto eu, e já fez diversas contribuições valiosas.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Simple uses of the vagalumeR package</title>
      <link>https://brunaw.github.io/post/2017-06-25-vagalumer/</link>
      <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://brunaw.github.io/post/2017-06-25-vagalumer/</guid>
      <description>&lt;script src=&#34;https://brunaw.github.io/rmarkdown-libs/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://brunaw.github.io/rmarkdown-libs/d3/d3.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://brunaw.github.io/rmarkdown-libs/forceNetwork-binding/forceNetwork.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;The website &lt;a href=&#34;https://www.vagalume.com.br&#34; class=&#34;uri&#34;&gt;https://www.vagalume.com.br&lt;/a&gt; is where we can obtain information about songs and their lyrics (with translations, when they’re not in portuguese). This same website has an API, which can be accessed in &lt;code&gt;R&lt;/code&gt;, through the &lt;a href=&#34;https://github.com/brunaw/vagalumeR&#34;&gt;vagalumeR&lt;/a&gt; package. Here, we have some demonstrations about the functionalities of the package, focusing on the analysis of music lyrics.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Package loading
library(vagalumeR)
library(tidyverse)
library(tm)
library(lattice)
library(lexiconPT)
library(latticeExtra)
library(wordcloud)
library(networkD3)

packageVersion(&amp;quot;vagalumeR&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] &amp;#39;0.1.1&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To access the API, the user must have in hand his &lt;code&gt;access token&lt;/code&gt;, which can be obtainde at the web address: &lt;a href=&#34;https://auth.vagalume.com.br/settings/api/&#34; class=&#34;uri&#34;&gt;https://auth.vagalume.com.br/settings/api/&lt;/a&gt; The steps are:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Access the link above,&lt;/li&gt;
&lt;li&gt;Create an account,&lt;/li&gt;
&lt;li&gt;Access the link again to get the token.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;key &amp;lt;- &amp;quot;insert-your-token&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Artist selection
artist &amp;lt;- &amp;quot;chico-buarque&amp;quot;

# Informations
(info &amp;lt;- artistInfo(artist))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                 id          name views pos period uniques points
1 3ade68b4g66c6eda3 Chico Buarque 10436  71 201806    5180   19.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Discography
disc &amp;lt;- discography(artist)
head(disc, 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;            album.id          album.name           label date
1  3ade68b6g040dfda3           Caravanas   Biscoito Fino 2017
2  3ade68b6g5b88fda3               Chico   Biscoito Fino 2011
3  3ade68b6g4638fda3             Carioca   Biscoito Fino 2006
4  3ade68b6g89d6fda3              Duetos                 2002
5  3ade68b6g18d6fda3          O Sambista                 2000
6  3ade68b6g48d6fda3 As Cidades -Ao Vivo Universal Music 1999
7  3ade68b6g29d6fda3          As Cidades                 1999
8  3ade68b6g39d6fda3         Uma Palavra                 1995
9  3ade68b6g19d6fda3           Paratodos                 1994
10 3ade68b6g69d6fda3      Ao Vivo: Paris             BMG 1990
                  id          name
1  3ade68b4g66c6eda3 Chico Buarque
2  3ade68b4g66c6eda3 Chico Buarque
3  3ade68b4g66c6eda3 Chico Buarque
4  3ade68b4g66c6eda3 Chico Buarque
5  3ade68b4g66c6eda3 Chico Buarque
6  3ade68b4g66c6eda3 Chico Buarque
7  3ade68b4g66c6eda3 Chico Buarque
8  3ade68b4g66c6eda3 Chico Buarque
9  3ade68b4g66c6eda3 Chico Buarque
10 3ade68b4g66c6eda3 Chico Buarque&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Album count per year
xtabs(~date, disc)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;date
1966 1967 1968 1970 1971 1972 1973 1974 1976 1978 1980 1981 1982 1984 1985 
   1    1    1    2    1    1    1    1    2    2    1    1    2    1    1 
1987 1989 1990 1994 1995 1999 2000 2002 2006 2011 2017 
   1    2    1    1    1    2    1    1    1    1    1 &lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Related artists
(rel &amp;lt;- relatedInfo(artist))[,4]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; [1] Vinicius de Moraes Gilberto Gil       Tom Jobim         
 [4] Milton Nascimento  Elis Regina        Maria Bethânia    
 [7] Caetano Veloso     Zeca Baleiro       Maria Rita        
[10] Lenine            
10 Levels: Caetano Veloso Elis Regina Gilberto Gil ... Zeca Baleiro&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Lyrics search
song &amp;lt;- songNames(artist)
let &amp;lt;- plyr::ldply(map(song$song.id[1:10], 
                       lyrics, 
                       type = &amp;quot;id&amp;quot;, 
                       key = key),
                   data.frame)

str(let)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;data.frame&amp;#39;:   10 obs. of  6 variables:
 $ id      : Factor w/ 1 level &amp;quot;3ade68b4g66c6eda3&amp;quot;: 1 1 1 1 1 1 1 1 1 1
 $ name    : Factor w/ 1 level &amp;quot;Chico Buarque&amp;quot;: 1 1 1 1 1 1 1 1 1 1
 $ song.id : Factor w/ 10 levels &amp;quot;3ade68b8g4c56cfa3&amp;quot;,..: 1 2 3 4 5 6 7 8 9 10
 $ song    : Factor w/ 10 levels &amp;quot;A Aurora de Nova Iorque&amp;quot;,..: 1 2 3 4 5 6 7 8 9 10
 $ language: int  1 1 1 1 1 1 1 1 1 1
 $ text    : chr  &amp;quot;A aurora de nova iorque tem  Quatro colunas de lodo  E um furacão de pombas  Que explode as águas podres.   A a&amp;quot;| __truncated__ &amp;quot;Estava à toa na vida O meu amor me chamou Pra ver a banda passar Cantando coisas de amor  A minha gente sofrida&amp;quot;| __truncated__ &amp;quot;Ouve a declaração, oh bela De um sonhador titã Um que dá nó em paralela  E almoça rolimã O homem mais forte do &amp;quot;| __truncated__ &amp;quot;Na cidade Ser artista É posar sorridente É ver se de repente Sai numa revista  É esperar que o orelhão Complete&amp;quot;| __truncated__ ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#--------------------------------------------
# Word frequencies --------------------------
#--------------------------------------------
  
# Create &amp;amp; clean the corpus
cps &amp;lt;- VCorpus(VectorSource(let$text),
                 readerControl = list(language = &amp;quot;pt&amp;quot;))
cps &amp;lt;- tm_map(cps, FUN = content_transformer(tolower))
cps &amp;lt;- tm_map(cps, FUN = removePunctuation)
cps &amp;lt;- tm_map(cps, FUN = removeNumbers)
cps &amp;lt;- tm_map(cps, FUN = stripWhitespace)
cps &amp;lt;- tm_map(cps,
                FUN = removeWords,
                words = stopwords(&amp;quot;portuguese&amp;quot;))
cps &amp;lt;- tm_map(cps,
                FUN = removeWords,
                words = &amp;quot;\t&amp;quot;)

# Create document-term matrix
dtm &amp;lt;- DocumentTermMatrix(cps)

inspect(dtm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt;DocumentTermMatrix (documents: 10, terms: 570)&amp;gt;&amp;gt;
Non-/sparse entries: 655/5045
Sparsity           : 89%
Maximal term length: 14
Weighting          : term frequency (tf)
Sample             :
    Terms
Docs amor banda bela bonita cidade finjo nunca passar pra ver
  1     0     0    0      0      1     0     0      0   0   0
  10    1     0    0      0      0     0     0      0   1   0
  2     6     7    0      0      1     0     0      5   6   5
  3     0     0    5      0      0     0     0      0   0   0
  4     0     0    0      0      3     0     0      0   0   1
  5     0     0    1      0      9     0     1      0   0   0
  6     0     0    0      0      0     0     0      0   0   0
  7     0     0    0      0      0     0     0      0   0   0
  8     0     0    0      0      0     0     7      0   0   0
  9     0     0    0      7      0     8     0      2   4   4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Minimum frequency terms
tms &amp;lt;- findFreqTerms(dtm, lowfreq = 3)
str(tms)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; chr [1:63] &amp;quot;águas&amp;quot; &amp;quot;alamedas&amp;quot; &amp;quot;amor&amp;quot; &amp;quot;amores&amp;quot; &amp;quot;artista&amp;quot; &amp;quot;atenção&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Associated terms
assoc &amp;lt;- findAssocs(dtm, terms = tms, corlimit = 0.9)
b &amp;lt;- data.frame(pal = &amp;quot;amor&amp;quot;, assoc = names(assoc$amor))

# Visualizing the network
simpleNetwork(b,
              opacity = 0.8, 
              linkColour= &amp;quot;violet&amp;quot;, 
              nodeColour=&amp;quot;tomato&amp;quot;, 
              zoom=TRUE, fontSize = 16,
              linkDistance = 70)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1&#34; style=&#34;width:500px;height:500px;&#34; class=&#34;forceNetwork html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1&#34;&gt;{&#34;x&#34;:{&#34;links&#34;:{&#34;source&#34;:[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],&#34;target&#34;:[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],&#34;value&#34;:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],&#34;colour&#34;:[&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;,&#34;violet&#34;]},&#34;nodes&#34;:{&#34;name&#34;:[&#34;abriu&#34;,&#34;acabou&#34;,&#34;administrada&#34;,&#34;ainda&#34;,&#34;alegre&#34;,&#34;amor&#34;,&#34;assanhou&#34;,&#34;avenida&#34;,&#34;brasil&#34;,&#34;brasileira&#34;,&#34;cada&#34;,&#34;calada&#34;,&#34;cansaço&#34;,&#34;canto&#34;,&#34;cheia&#34;,&#34;dançou&#34;,&#34;debruçou&#34;,&#34;desencanto&#34;,&#34;despediuse&#34;,&#34;doce&#34;,&#34;dor&#34;,&#34;enfeitou&#34;,&#34;escondida&#34;,&#34;espalhou&#34;,&#34;esqueceu&#34;,&#34;estrelas&#34;,&#34;faroleiro&#34;,&#34;fechada&#34;,&#34;feia&#34;,&#34;fermata&#34;,&#34;fraco&#34;,&#34;gente&#34;,&#34;insistiu&#34;,&#34;marcha&#34;,&#34;meninada&#34;,&#34;moderna&#34;,&#34;namorada&#34;,&#34;ouvir&#34;,&#34;passagem&#34;,&#34;passou&#34;,&#34;pensando&#34;,&#34;pensou&#34;,&#34;sair&#34;,&#34;sério&#34;,&#34;sofrida&#34;,&#34;sorriu&#34;,&#34;surgiu&#34;,&#34;terraço&#34;,&#34;toa&#34;,&#34;tocava&#34;,&#34;tomou&#34;,&#34;triste&#34;,&#34;tudo&#34;,&#34;vantagem&#34;],&#34;group&#34;:[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],&#34;nodesize&#34;:[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]},&#34;options&#34;:{&#34;NodeID&#34;:&#34;name&#34;,&#34;Group&#34;:&#34;group&#34;,&#34;colourScale&#34;:&#34;d3.scaleOrdinal([&#39;tomato&#39;])&#34;,&#34;fontSize&#34;:16,&#34;fontFamily&#34;:&#34;serif&#34;,&#34;clickTextSize&#34;:40,&#34;linkDistance&#34;:70,&#34;linkWidth&#34;:&#34;&#39;1.5px&#39;.toString()&#34;,&#34;charge&#34;:-30,&#34;opacity&#34;:0.8,&#34;zoom&#34;:true,&#34;legend&#34;:false,&#34;arrows&#34;:false,&#34;nodesize&#34;:true,&#34;radiusCalculation&#34;:&#34;d.nodesize&#34;,&#34;bounded&#34;:false,&#34;opacityNoHover&#34;:1,&#34;clickAction&#34;:null}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Word count
frq &amp;lt;- slam::colapply_simple_triplet_matrix(dtm, FUN = sum)
frq &amp;lt;- sort(frq, decreasing = TRUE)

# Plotting the 30 most frequent words
barchart(head(frq, n = 30), xlim = c(0, NA),
         col =  &amp;quot;lightsalmon&amp;quot;, 
         xlab = &amp;quot;Frequency&amp;quot;,
         ylab = &amp;quot;Words&amp;quot;,
         main = &amp;quot;Chico Buarque songs&amp;quot;,
         strip = strip.custom(bg = &amp;quot;white&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://brunaw.github.io/post/2017-06-25-vagalumeR_files/figure-html/unnamed-chunk-5-2.png&#34; width=&#34;500&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Wordcloud
wordcloud(cps,
          family = &amp;quot;serif&amp;quot;, 
          min.freq = 3,
          max.words = 30,
          colors = brewer.pal(7, &amp;quot;Paired&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://brunaw.github.io/post/2017-06-25-vagalumeR_files/figure-html/unnamed-chunk-5-3.png&#34; width=&#34;500&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#--------------------------------------------
# Polarities --------------------------------
#--------------------------------------------

# Sentiments dictionary in portuguese - lexiconPT
dic &amp;lt;- lexiconPT::oplexicon_v3.0
str(dic)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;#39;data.frame&amp;#39;:   32191 obs. of  4 variables:
 $ term             : chr  &amp;quot;=[&amp;quot; &amp;quot;=@&amp;quot; &amp;quot;=p&amp;quot; &amp;quot;=P&amp;quot; ...
 $ type             : chr  &amp;quot;emot&amp;quot; &amp;quot;emot&amp;quot; &amp;quot;emot&amp;quot; &amp;quot;emot&amp;quot; ...
 $ polarity         : int  -1 -1 -1 -1 -1 1 1 1 1 -1 ...
 $ polarity_revision: chr  &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; &amp;quot;A&amp;quot; ...&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Intersections: dictionary &amp;amp; songs
inter &amp;lt;- intersect(x = Terms(dtm),
                   y = dic$term)
length(inter)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1] 122&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Brings polarities to words in the lyrics
lex &amp;lt;- merge(x = data.frame(term = inter,
                            stringsAsFactors = FALSE),
             y = dic,
             sort = FALSE)
head(lex, 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           term type polarity polarity_revision
1  administrada  adj        0                 A
2        alegre  adj        1                 M
3          amar   vb        1                 A
4    analfabeto  adj       -1                 A
5      apertado  adj       -1                 M
6       artista  adj        0                 A
7      artistas  adj        0                 A
8          azul  adj        0                 M
9         beber   vb        0                 A
10         bela  adj        1                 M&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Ordinary matrix
m &amp;lt;- as.matrix(dtm)
m &amp;lt;- m[, lex$term]

# Row sums
rtot &amp;lt;- rowSums(m)

# &amp;quot;Loadings&amp;quot; of each song
(carga &amp;lt;- (m %*% lex$polarity)/rtot)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    
Docs        [,1]
  1   0.37500000
  2   0.00000000
  3   0.33333333
  4   0.32258065
  5   0.06976744
  6  -0.35714286
  7   0.00000000
  8   0.44444444
  9   0.26923077
  10  0.27272727&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Sum of polarities per song
m %*% cbind(lex$polarity)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;    
Docs [,1]
  1     3
  2     0
  3     5
  4    10
  5     3
  6    -5
  7     0
  8     4
  9     7
  10    3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function to calculate the proportion of each polarity
pp &amp;lt;- function(song){
  
  cps &amp;lt;- VCorpus(VectorSource(song),
                 readerControl = list(language = &amp;quot;pt&amp;quot;))
  cps &amp;lt;- tm_map(cps, FUN = content_transformer(tolower))
  cps &amp;lt;- tm_map(cps, FUN = removePunctuation)
  cps &amp;lt;- tm_map(cps, FUN = removeNumbers)
  cps &amp;lt;- tm_map(cps, FUN = stripWhitespace)
  cps &amp;lt;- tm_map(cps,
                FUN = removeWords,
                words = stopwords(&amp;quot;portuguese&amp;quot;))
  cps &amp;lt;- tm_map(cps,
                FUN = removeWords,
                words = &amp;quot;\t&amp;quot;)
  
  dtm &amp;lt;- DocumentTermMatrix(cps)
  
  inter &amp;lt;- intersect(x = Terms(dtm),
                     y = dic$term)
  
  lex &amp;lt;- merge(x = data.frame(term = inter,
                              stringsAsFactors = FALSE),
               y = dic,
               sort = FALSE)
  
  pp &amp;lt;- c(prop.table(xtabs(~polarity, lex)))
  
  return(pp)  
}


(pcs &amp;lt;- plyr::ldply(map(let$text, pp), matrix, ncol = 3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;           1         2         3
1  0.1428571 0.4285714 0.4285714
2  0.3809524 0.3809524 0.2380952
3  0.3000000 0.3000000 0.4000000
4  0.0800000 0.6000000 0.3200000
5  0.3333333 0.3750000 0.2916667
6  0.4615385 0.3846154 0.1538462
7  0.2857143 0.2857143 0.4285714
8  0.1428571 0.4285714 0.4285714
9  0.3000000 0.4000000 0.3000000
10 0.2727273 0.1818182 0.5454545&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(pcs) &amp;lt;- c(&amp;quot;neg&amp;quot;, &amp;quot;neutro&amp;quot;, &amp;quot;pos&amp;quot;)

# Cumulative distributions of the sentiments in 
# Chico Buarque songs 
ecdfplot(~pos+neg+neutro, pcs, 
         col = c(&amp;quot;tomato&amp;quot;, &amp;quot;turquoise&amp;quot;, &amp;quot;orange&amp;quot;),
         key = list(columns = 1,
                    corner = c(0.05, 0.9),
                    lines = list(col = c(&amp;quot;tomato&amp;quot;, &amp;quot;turquoise&amp;quot;,
                                         &amp;quot;orange&amp;quot;)),
                                 text = list(c(&amp;quot;neg&amp;quot;, &amp;quot;neutro&amp;quot;,
                                               &amp;quot;pos&amp;quot;))))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://brunaw.github.io/post/2017-06-25-vagalumeR_files/figure-html/unnamed-chunk-5-4.png&#34; width=&#34;500&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
